// Prisma schema for scalable e-commerce app
// See rules.md for model details

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  phone         String?        @unique
  emailVerified DateTime?
  image         String?
  role          String         @default("CUSTOMER")
  passwordHash  String?
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlist      WishlistItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

    @@index([email])
    @@index([phone])
  @@map("users")
}

model Product {
  id              String           @id @default(cuid())
  name            String
  description     String?
  slug            String           @unique
  status          String           @default("DRAFT")
  brand           String?
  metaTitle       String?
  metaDescription String?
  basePrice       Decimal          @db.Money
  comparePrice    Decimal?         @db.Money
  weight          Float?
  dimensions      Json?
  category        Category         @relation(fields: [categoryId], references: [id])
  categoryId      String
  variants        ProductVariant[]
  images          ProductImage[]
  reviews         Review[]
  viewCount       Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  Order           Order?           @relation(fields: [orderId], references: [id])
  orderId         String?
  CartItem        CartItem[]
  WishlistItem    WishlistItem[]

  @@index([categoryId])
  @@index([status])
  @@index([createdAt])
  @@map("products")
}

model Address {
  id      String  @id @default(cuid())
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  line1   String
  line2   String?
  city    String
  state   String
  country String
  zipCode String
}

model Order {
  id        String    @id @default(cuid())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?
  products  Product[]
  status    String
  createdAt DateTime  @default(now())
}

model Review {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

model CartItem {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  quantity  Int
}

model WishlistItem {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Category {
  id       String    @id @default(cuid())
  name     String
  products Product[]
}

model ProductVariant {
  id        String   @id @default(cuid())
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  name      String
  size      String?
  color     String?
  price     Decimal  @db.Money
  inventory Int      @default(0)
}

model ProductImage {
  id        String   @id @default(cuid())
  product   Product? @relation(fields: [productId], references: [id])
  productId String?
  url       String
}

model SearchEvent {
  id           String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  query       String
  resultsCount Int
  createdAt   DateTime @default(now())
}

model VerificationToken {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}
